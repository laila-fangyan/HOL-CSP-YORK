
theory Bounded_Buffer_20241001_ddl_refinement
  imports "HOLCF-Library.Nat_Discrete" "HOLCF-Library.Int_Discrete"
          "HOLCF-Library.List_Cpo" "HOL-CSP_Proc-Omata.CompactificationSync"
          "HOL-CSP_OpSem.Determinism" "HOL-CSP_Proc-Omata.NormalizationProperties"
          "Guard"
begin

default_sort type


no_notation floor (\<open>\<lfloor>_\<rfloor>\<close>)
no_notation ceiling (\<open>\<lceil>_\<rceil>\<close>)

no_notation Cons  ("_ \<cdot>/ _" [66,65] 65)


subsection\<open>The bounded buffer processes definition in HOL-CSP using fixrec\<close>

locale BoundedBuffer =
  fixes maxbuff :: nat
  \<comment> \<open>The buffer is bounded in its length: it may hold no more than maxbuff elements\<close>
  assumes maxbuff_g0 [simp] : \<open>maxbuff > 0\<close>  

begin


\<comment> \<open>The process Buffer has two channels: input and output.\<close>
datatype ringbuf_event =  input int | "output" int | rd "nat \<times> int" | wrt "nat \<times> int" 
\<comment> \<open>The channels rd and wrt are used for communication with the ring cells.\<close>
\<comment> \<open>The values communicated through rd and wrt are pairs, where the first element iden-
tifes a cell, and the second element is the number actually communicated.\<close>

\<comment> \<open>A simple bounded reactive FIFO buffer 'BBuf' that is used to store natural numbers.\<close>
\<comment> \<open>There are two state variables:  the buffer size sz, the contents of the buffer buff. 
These two are presented as parameters.\<close>
fixrec BBuf :: \<open>nat \<rightarrow> int list \<rightarrow> ringbuf_event process\<close> where
  [simp del]: \<open>BBuf\<cdot>sz\<cdot>buff = (sz < maxbuff) \<^bold>& (input\<^bold>?x \<rightarrow> BBuf\<cdot>(sz+1)\<cdot>(buff @ [x]))  \<box>
                  (sz > 0) \<^bold>& (output\<^bold>!(hd buff) \<rightarrow> BBuf\<cdot>(sz-1)\<cdot>(tl buff)) \<close>
\<comment> \<open>The input action is enabled if there is space in the buffer for the new input: sz < maxbuff.
 The new element is appended to the buffer's contents and the size is updated\<close>
\<comment> \<open>The output action is enabled if there is something in the buffer: sz>0. The first element (head) is
output; the others are retained in order; the size of the buffer is updated.\<close>


datatype 'a buffer_any_event =  input_any 'a | output_any 'a | rd "nat \<times> 'a" | wrt "nat \<times>'a" 

definition BBuf_any :: \<open>nat \<Rightarrow> 'a list \<Rightarrow> 'a buffer_any_event process\<close>
  where \<open>BBuf_any \<equiv> \<mu> X. (\<lambda>sz buff. (sz < maxbuff) \<^bold>& (input_any\<^bold>?x \<rightarrow> X (sz+1) (buff @ [x]))  \<box>
                                     (sz > 0) \<^bold>& (output_any\<^bold>!(hd buff) \<rightarrow> X (sz-1) (tl buff))) \<close>

lemma BBuf_any_cont : 
  \<open>cont (\<lambda>x sz buff. (sz < maxbuff) \<^bold>& (input_any\<^bold>?xa \<rightarrow> x (sz + 1) (buff @ [xa])) \<box>
                     (0 < sz) \<^bold>& (output_any\<^bold>!hd buff \<rightarrow> x (sz - 1) (tl buff)))\<close>
  (is \<open>cont (\<lambda>x sz buff. ?f x sz buff \<box> ?g x sz buff)\<close>)
proof (rule cont2cont_lambda, rule cont2cont_lambda, rule Det_cont)
  show \<open>\<And>sz buff. cont (\<lambda>x. ?f x sz buff)\<close>
      (* TODO: understand why the continuity proof is so difficult *)
    apply (rule Guard_cont)
    apply (rule read_cont)
    apply (rule cont2cont_lambda)
    by (rule cont2cont_fun, simp add: cont_fun)
next
  show \<open>\<And>sz buff. cont (\<lambda>x. ?g x sz buff)\<close>
    apply (rule Guard_cont)
    apply (rule write_cont)
    by (metis cont2cont_fun cont_fun)
qed

lemma BBuf_any_unfold :
  \<open>BBuf_any sz buff = (sz < maxbuff) \<^bold>& (input_any\<^bold>?x \<rightarrow> BBuf_any (sz+1) (buff @ [x]))  \<box>
                      (sz > 0) \<^bold>& (output_any\<^bold>!(hd buff) \<rightarrow> BBuf_any (sz-1) (tl buff))\<close>
  (is \<open>BBuf_any sz buff = ?f BBuf_any sz buff \<box> ?g BBuf_any sz buff\<close>)
  by (subst cont_process_rec[OF BBuf_any_def[THEN meta_eq_to_obj_eq] BBuf_any_cont]) simp





subsection \<open>2. Translation into normal form - Proc-Omata\<close>
\<comment> \<open>BOTH transition function AND Enableness function are manually and explicitely defined\<close>

\<comment> \<open>Automaton\<close>
definition BBuf_any_A :: \<open>(nat \<times> 'a list, 'a buffer_any_event) A\<^sub>d\<close>
  where
 \<open>BBuf_any_A \<equiv> \<lparr>
          \<tau> = \<lambda>s e. case s of (sz, L) \<Rightarrow> 
                    (case e of input_any x \<Rightarrow> if sz < maxbuff then \<lfloor>(Suc sz, L @ [x])\<rfloor> else \<diamond>
                             | output_any x \<Rightarrow> if 0 < sz \<and> hd L = x then \<lfloor>(sz - 1, tl L)\<rfloor> else \<diamond>),
          \<S>\<^sub>F = {}, \<S>\<^sub>I = {}\<rparr>\<close>

\<comment> \<open>Enableness: enabled event set\<close>
lemma BBuf_any_\<epsilon> :
  \<open>\<epsilon> BBuf_any_A s = (case s of (sz, L) \<Rightarrow>
                       if sz < maxbuff
                     then   if 0 < sz
                          then {output_any (hd L)} \<union> range input_any
                          else range input_any
                     else {output_any (hd L)})\<close> (* necessarily then 0 < sz *)
 (* by (auto simp add: BBuf_any_A_def \<epsilon>_simps split: buffer_any_event.splits if_splits)
     (use bot_nat_0.not_eq_extremum maxbuff_g0 in blast)
*)
  sorry

\<comment> \<open>transition function \<tau>, why do we need to define it one more time?\<close>
lemma BBuf_any_\<tau> :
  \<open>\<tau> BBuf_any_A s e = (case s of (sz, L) \<Rightarrow> (case e of input_any x \<Rightarrow> if sz < maxbuff then \<lfloor>(Suc sz, L @ [x])\<rfloor> else \<diamond>
                                                   | output_any x \<Rightarrow> if 0 < sz \<and> hd L = x then \<lfloor>(sz - 1, tl L)\<rfloor> else \<diamond>))\<close>
  by (simp add: BBuf_any_A_def)

\<comment> \<open>Proc-Omaton\<close>
definition BBuf_any_P_d :: \<open>nat \<times> 'a list \<Rightarrow> 'a buffer_any_event process\<close>
  where \<open>BBuf_any_P_d s \<equiv> P\<lbrakk>BBuf_any_A\<rbrakk>\<^sub>d s\<close>



\<comment> \<open>Equivalence\<close>
lemma BBuf_any_is_BBuf_any_P_d: \<open>BBuf_any sz L = BBuf_any_P_d (sz, L)\<close>
proof (rule sym, unfold BBuf_any_P_d_def,
       rule deterministic_iff_maximal_for_leFD[THEN iffD1, OF deterministic_P_d, rule_format])
  show \<open>P\<lbrakk>BBuf_any_A\<rbrakk>\<^sub>d (sz, L) \<sqsubseteq>\<^sub>F\<^sub>D BBuf_any sz L\<close>
  proof (induct arbitrary: sz L rule: fix_ind[where F = \<open>\<Lambda> X. P_d_step (\<epsilon> BBuf_any_A) (\<tau> BBuf_any_A) X\<close>])
    show \<open>adm (\<lambda>a. \<forall>sz L. a (sz, L) \<sqsubseteq>\<^sub>F\<^sub>D BBuf_any sz L)\<close>
      by (simp add: cont_fun monofunI)
  next
    show \<open>\<bottom> (sz, L) \<sqsubseteq>\<^sub>F\<^sub>D BBuf_any sz L\<close> for sz L by simp
  next
    fix X :: \<open>nat \<times> 'a list \<Rightarrow> 'a buffer_any_event process\<close> and sz L
    assume hyp : \<open>X (sz, L) \<sqsubseteq>\<^sub>F\<^sub>D BBuf_any sz L\<close> for sz L
    show \<open>((\<Lambda> X. P_d_step (\<epsilon> BBuf_any_A) (\<tau> BBuf_any_A) X)\<cdot>X) (sz, L) \<sqsubseteq>\<^sub>F\<^sub>D BBuf_any sz L\<close>
      apply (subst BBuf_any_unfold, simp add: BBuf_any_\<epsilon> Det_STOP Mprefix_Un_distrib)
      apply (intro conjI impI)
        apply (subst Mprefix_Un_distrib[of \<open>{_}\<close>, simplified])
        apply (subst Det_commute)
        apply (rule mono_Det_FD)
         apply (unfold read_def)
         apply (intro mono_Mprefix_FD ballI)
         apply (auto simp add: BBuf_any_\<tau> image_iff)[1]
         apply (subst inv_f_f, meson buffer_any_event.simps(1) inj_onI)
         apply (solves \<open>simp add: hyp\<close>)

        apply (unfold write_def)
        apply (intro mono_Mprefix_FD ballI)
        apply (simp add: BBuf_any_\<tau> image_iff)
        apply (solves \<open>simp add: hyp\<close>)

       apply (simp add: Det_commute[of STOP, simplified Det_STOP])
       apply (intro mono_Mprefix_FD ballI)
       apply (simp add: BBuf_any_\<tau> image_iff)
       apply (solves \<open>simp add: hyp\<close>)

      apply (intro mono_Mprefix_FD ballI)
      apply (auto simp add: BBuf_any_\<tau>)[1]
      apply (subst inv_f_f, meson buffer_any_event.simps(1) inj_onI)
      by (solves \<open>simp add: hyp\<close>)
  qed
qed



lemma BBuf_any_is_BBuf_any_P_d_ : \<open>BBuf_any sz L = BBuf_any_P_d (sz, L)\<close>
  \<comment> \<open>More automatized proof\<close>
proof (rule sym, unfold BBuf_any_P_d_def,
       rule deterministic_iff_maximal_for_leFD[THEN iffD1, OF deterministic_P_d, rule_format])
  show \<open>P\<lbrakk>BBuf_any_A\<rbrakk>\<^sub>d (sz, L) \<sqsubseteq>\<^sub>F\<^sub>D BBuf_any sz L\<close>
  proof (induct arbitrary: sz L rule: fix_ind[where F = \<open>\<Lambda> X. P_d_step (\<epsilon> BBuf_any_A) (\<tau> BBuf_any_A) X\<close>])
    show \<open>adm (\<lambda>a. \<forall>sz L. a (sz, L) \<sqsubseteq>\<^sub>F\<^sub>D BBuf_any sz L)\<close>
      by (simp add: cont_fun monofunI)
  next
    show \<open>\<bottom> (sz, L) \<sqsubseteq>\<^sub>F\<^sub>D BBuf_any sz L\<close> for sz L by simp
  next
    have * : \<open>inv input_any (input_any x) = x\<close> for x
      by (meson buffer_any_event.simps(1) f_inv_into_f range_eqI)
    fix X :: \<open>nat \<times> 'a list \<Rightarrow> 'a buffer_any_event process\<close> and sz L
    assume hyp : \<open>X (sz, L) \<sqsubseteq>\<^sub>F\<^sub>D BBuf_any sz L\<close> for sz L
    show \<open>((\<Lambda> X. P_d_step (\<epsilon> BBuf_any_A) (\<tau> BBuf_any_A) X)\<cdot>X) (sz, L) \<sqsubseteq>\<^sub>F\<^sub>D BBuf_any sz L\<close>
      apply (subst BBuf_any_unfold, simp add: BBuf_any_\<epsilon> Det_STOP Mprefix_Un_distrib)
      apply (intro conjI impI)
        apply (unfold read_def write_def Mprefix_Det_Mprefix)
        apply (subst Un_commute)
        apply (simp) (* Why do we nee a simp here ??? *)
        apply (intro mono_Mprefix_FD ballI)
        apply (auto simp add: image_iff BBuf_any_\<tau> "*" intro : hyp)[1]

       apply (simp add: Det_commute[of STOP, simplified Det_STOP])
       apply (intro mono_Mprefix_FD ballI)
       apply (simp add: BBuf_any_\<tau> hyp)
      apply (intro mono_Mprefix_FD ballI)
      by (auto simp add: BBuf_any_\<tau> "*" hyp)
  qed
qed



     
theorem deadlock_free_BBuf_any : \<open>deadlock_free (BBuf_any n L)\<close>
  apply (simp add: BBuf_any_is_BBuf_any_P_d BBuf_any_P_d_def P_d_deadlock_free_iff)
  by (auto simp add: BBuf_any_\<epsilon> split: if_split_asm)




(* the four following lemmas are not useful for now *)
(*
lemma Nil_\<R>\<^sub>d_BBuf_any : \<open>(0, []) \<in> \<R>\<^sub>d BBuf_any_A (length L, L)\<close>
proof (induct L)
  show \<open>(0, []) \<in> \<R>\<^sub>d BBuf_any_A (length [], [])\<close> by (simp add: \<R>\<^sub>d.init)
next
  fix L :: \<open>'a list\<close> and x assume hyp : \<open>(0, []) \<in> \<R>\<^sub>d BBuf_any_A (length L, L)\<close>
  show \<open>(0, []) \<in> \<R>\<^sub>d BBuf_any_A (length (x # L), x # L)\<close>
    apply (rule \<R>\<^sub>d_trans[OF hyp])
    apply (rule \<R>\<^sub>d.step[OF \<R>\<^sub>d.init, of _ _ _ \<open>output_any x\<close>])
    by (simp add: BBuf_any_\<tau>)
qed

lemma BBuf_any_\<R>\<^sub>d_Nil : \<open>\<R>\<^sub>d BBuf_any_A (0, []) = {(length L, L)| L. length L \<le> maxbuff}\<close>
proof safe
  show \<open>(sz, L) \<in> \<R>\<^sub>d BBuf_any_A (0, []) \<Longrightarrow> \<exists>L'. (sz, L) = (length L', L') \<and> length L' \<le> maxbuff\<close> for sz L
  proof (induct rule: \<R>\<^sub>d.induct)
    show \<open>\<exists>L'. (0, []) = (length L', L') \<and> length L' \<le> maxbuff\<close> by simp
  next
    fix t u e
    assume * : \<open>t \<in> \<R>\<^sub>d BBuf_any_A (0, [])\<close> \<open>\<exists>L'. t = (length L', L') \<and> length L' \<le> maxbuff\<close> \<open>\<lfloor>u\<rfloor> = \<tau> BBuf_any_A t e\<close>
    from "*"(2) obtain L' where \<open>t = (length L', L')\<close> \<open>length L' \<le> maxbuff\<close> by blast
    show \<open>\<exists>L'. u = (length L', L') \<and> length L' \<le> maxbuff\<close>
    proof (cases e)
      fix x assume \<open>e = input_any x\<close>
      with "*"(3) \<open>t = (length L', L')\<close>
      show \<open>\<exists>L'. u = (length L', L') \<and> length L' \<le> maxbuff\<close>
        apply (intro exI[where x = \<open>L' @ [x]\<close>])
        by (simp add: BBuf_any_\<tau> split: prod.split_asm if_split_asm)
    next
      fix x assume \<open>e = output_any x\<close>
      with "*"(3) \<open>t = (length L', L')\<close> \<open>length L' \<le> maxbuff\<close>
      show \<open>\<exists>L'. u = (length L', L') \<and> length L' \<le> maxbuff\<close>
        apply (intro exI[where x = \<open>tl L'\<close>])
        by (simp add: BBuf_any_\<tau> split: prod.split_asm if_split_asm)
    qed
  qed
next
  show \<open>length L \<le> maxbuff \<Longrightarrow> (length L, L) \<in> \<R>\<^sub>d BBuf_any_A (0, [])\<close> for L
  proof (induct L rule: rev_induct)
    show \<open>length [] \<le> maxbuff \<Longrightarrow> (length [], []) \<in> \<R>\<^sub>d BBuf_any_A (0, [])\<close>
      by (simp add: \<R>\<^sub>d.init)
  next
    fix e L
    assume hyp : \<open>length L \<le> maxbuff \<Longrightarrow> (length L, L) \<in> \<R>\<^sub>d BBuf_any_A (0, [])\<close>
      and prem : \<open>length (L @ [e]) \<le> maxbuff\<close>
    show \<open>(length (L @ [e]), L @ [e]) \<in> \<R>\<^sub>d BBuf_any_A (0, [])\<close>
      apply (rule \<R>\<^sub>d.step[OF hyp, of _ \<open>input_any e\<close>])
      using prem apply auto[1]
      apply (simp add: BBuf_any_\<tau>)
      using prem by auto[1]
  qed
qed
    

lemma events_BBuf_any: \<open>events_of (BBuf_any 0 []) = range input_any \<union> range output_any\<close>
  apply (simp add: BBuf_any_is_BBuf_any_P_d BBuf_any_P_d_def events_P_d BBuf_any_\<R>\<^sub>d_Nil)
  apply (auto simp add: BBuf_any_\<epsilon> image_iff split: if_split_asm)
  by (metis Ex_list_of_length length_Cons list.sel(1) maxbuff_g0 neq_Nil_conv not_less_iff_gr_or_eq)
 

lemma initials_BBuf_any: \<open>(BBuf_any (length L) L)\<^sup>0 =
                          (if length L < maxbuff then ev ` range input_any else {}) \<union>
                          (if 0 < length L then {ev (output_any (hd L))} else {})\<close>
  by (subst cont_process_rec[OF BBuf_any_def[THEN meta_eq_to_obj_eq] BBuf_any_cont])
     (auto simp add: initials_STOP write_def read_def comp_def initials_Det initials_Mprefix image_iff)


*)

\<comment> \<open>Automaton\<close>
definition BBuf_A :: \<open>(nat \<times> int list, ringbuf_event) A\<^sub>d\<close> (\<open>A\<^sub>b\<^sub>b\<close>) where
  \<open>A\<^sub>b\<^sub>b \<equiv> \<lparr>
    \<tau> = \<lambda>s e. case s of (sz, buff) \<Rightarrow> 
      (case e of 
          input x \<Rightarrow> if sz < maxbuff then \<lfloor>(Suc sz, buff @ [x])\<rfloor> else \<diamond>
        | output x \<Rightarrow> if sz > 0  \<and> hd buff = x  then \<lfloor>(sz - 1, tl buff)\<rfloor> else \<diamond>
     ),
    \<S>\<^sub>F = {},  
    \<S>\<^sub>I = {}   
  \<rparr>
\<close> (*  \<and> hd L = x  *)


\<comment> \<open>Enableness: enabled event set\<close>
lemma BBuf_\<epsilon> :
  \<open>\<epsilon> A\<^sub>b\<^sub>b s = (case s of (sz, buff) \<Rightarrow>
                       if sz < maxbuff
                     then   if 0 < sz
                          then {output (hd buff)} \<union> range input
                          else range input
                     else {output (hd buff)})\<close> (* necessarily then 0 < sz *)
  apply (auto simp add: BBuf_A_def \<epsilon>_simps split: ringbuf_event.splits if_splits)
    
  sorry


\<comment> \<open>transition function \<tau>\<close>
lemma BBuf_\<tau> :
  \<open>\<tau> A\<^sub>b\<^sub>b s e = (case s of (sz, buff) \<Rightarrow> (case e of input x \<Rightarrow> if sz < maxbuff then \<lfloor>(Suc sz, buff @ [x])\<rfloor> else \<diamond>
                                                   | output x \<Rightarrow> if 0 < sz \<and> hd buff = x then \<lfloor>(sz - 1, tl buff)\<rfloor> else \<diamond>))\<close>
  by (simp add: BBuf_A_def)


definition BBuf_P_d :: \<open>nat \<Rightarrow> int list \<Rightarrow> ringbuf_event process\<close> where
  \<open>BBuf_P_d sz buff \<equiv> P\<lbrakk>A\<^sub>b\<^sub>b\<rbrakk>\<^sub>d (sz, buff)\<close>


lemma BBuf_is_BBuf_P_d: \<open>BBuf\<cdot>sz\<cdot>buff = BBuf_P_d sz buff\<close>
  unfolding BBuf_P_d_def BBuf_def
  sorry


     
theorem deadlock_free_BBuf : \<open>deadlock_free (BBuf\<cdot>sz\<cdot>buff)\<close>
  apply (simp add: BBuf_is_BBuf_P_d BBuf_P_d_def P_d_deadlock_free_iff)
  by (auto simp add: BBuf_\<epsilon> split: if_split_asm)


(*
definition \<open>inv_bbuf sz buff \<equiv>
             sz \<le> maxbuff \<and> length buff = sz \<and>  maxbuff > 0\<close> (* ? ?  *)

lemma show_inv_bbuf: 
  \<open>sz \<le> maxbuff \<and> length buff = sz \<and>  maxbuff > 0 \<Longrightarrow> 
    inv_bbuf sz buff\<close>
  by (simp add: inv_bbuf_def)


lemma inv_BBUF: \<open>(sz,buff) \<in> \<R>\<^sub>d A\<^sub>b\<^sub>b (0, []) \<Longrightarrow> inv_bbuf sz buff\<close>
  oops

lemma inv_implies_DF: \<open>\<epsilon> A\<^sub>b\<^sub>b (sz, buff) \<noteq> {}\<close> if hyp_inv: \<open>inv_bbuf sz buff\<close>
  oops

*)

end












subsection\<open>The Ring Buffer processes definition in HOL-CSP using fixrec\<close>


\<comment> \<open>An implementation uses a ring of cells, each implemented as a  process, and a central controller that keeps track of
the indexes of the first and last elements (bot, top), offering the input and output services.\<close>
context BoundedBuffer
begin

definition maxring :: nat where \<open>maxring \<equiv> maxbuff - 1\<close>
\<comment> \<open>The maximum size of the ring is one less than the size of the buffer, as the head is cached.\<close>

declare maxring_def [simp]


\<comment> \<open>The indexes of the ring go from 0 to maxring-1.\<close>
definition ringindex ::  \<open>nat set\<close> where \<open>ringindex = {0..<maxring}\<close> 


\<comment> \<open>The impl solution is to cache the head (first element, bottom of stack) of the ring in the controller, 
and distribute only the tail of the buffer around the ring.\<close>
\<comment> \<open>The state of the controller contains the size of the buffer (sz), the cache,
and two ring indexes, keeping track of the index of the next available position (top)
and the index of the first value stored (bot).\<close>

\<comment> \<open>RingBuffer modellign using fixed-point operator\<close>
definition Cell_any :: \<open>nat \<Rightarrow> 'a  \<Rightarrow> 'a buffer_any_event process\<close>
 where \<open>Cell_any \<equiv> \<mu> X. (\<lambda>n v.(rd\<^bold>!(n,v) \<rightarrow> X n v)  \<box>
                                   (wrt\<^bold>?(i,x) \<in> {i. i = n} \<times> UNIV \<rightarrow> X n x)
                         ) \<close>

lemma Cell_any_cont : 
  \<open>cont (\<lambda>x n v.(rd\<^bold>!(n,v) \<rightarrow> x n v)  \<box>
                (wrt\<^bold>?(i,xa) \<in> {i. i = n} \<times> UNIV \<rightarrow> x n xa)
         )\<close>
  (is \<open>cont (\<lambda>x n v. ?f x n v \<box> ?g x n v)\<close>)
proof (rule cont2cont_lambda, rule cont2cont_lambda, rule Det_cont)
  show \<open>\<And>n v. cont (\<lambda>x. ?f x n v)\<close>
    apply (rule write_cont)
    by (rule cont2cont_fun, simp add: cont_fun)
next
  show \<open>\<And>n v. cont (\<lambda>x. ?g x n v)\<close>
    apply (rule read_cont)
    apply (rule cont2cont_fun, simp add: cont_fun)
  oops

(*fixrec  Cell     :: \<open>nat \<rightarrow> 'a \<rightarrow> 'a buffer_any_event  process\<close> 
    and RingCell :: \<open>nat \<rightarrow> 'a buffer_any_event  process\<close>  
    and Ctrl     :: \<open>nat \<rightarrow> 'a \<rightarrow> nat  \<rightarrow> nat  \<rightarrow> 'a buffer_any_event  process\<close> 

where

[simp del] : \<open>Cell\<cdot>n\<cdot>v =  (rd\<^bold>!(n,v) \<rightarrow> Cell\<cdot>n\<cdot>v)  \<box>
               (wrt\<^bold>?(i,x) \<in> {i. i = n} \<times> UNIV \<rightarrow> Cell\<cdot>n\<cdot>x) \<close>

|[simp del] : \<open>RingCell\<cdot>n = (wrt\<^bold>?(i,x) \<in> {i. i = n} \<times> UNIV \<rightarrow> Cell\<cdot>n\<cdot>x) \<close>

|[simp del] : \<open>Ctrl\<cdot>sz\<cdot>cache\<cdot>to\<cdot>bo = ((input\<^bold>_any?x \<rightarrow> ((sz=0) \<^bold>& Ctrl\<cdot>1\<cdot>x\<cdot>to\<cdot>bo)  \<box>
                                    ((sz>0 \<and> sz< maxbuff) \<^bold>& (wrt\<^bold>!(to,x) \<rightarrow>
 Ctrl\<cdot>(sz+1)\<cdot>cache\<cdot>((to+1)mod maxring) \<cdot> bo)) )
                                  
                        \<box>
                        (((sz > 0) \<^bold>& (output\<^bold>_any!cache \<rightarrow>
                              ((sz>1)  \<^bold>& (rd\<^bold>?(i,x) \<in> {i. i = bo} \<times> UNIV \<rightarrow> Ctrl\<cdot>(sz-1)\<cdot>x\<cdot>to\<cdot>((bo+1)mod maxring)))
                              \<box>
                              (sz=1) \<^bold>& Ctrl\<cdot>0\<cdot>cache\<cdot>to\<cdot>bo  ) )))\<close>
*)

definition RingCell_any :: \<open>nat \<Rightarrow>  'a buffer_any_event process\<close>
 where \<open>RingCell_any \<equiv>\<lambda>n . (wrt\<^bold>?(i,x) \<in> {i. i = n} \<times> UNIV \<rightarrow> Cell_any n x) \<close>

definition Ctrl_any :: \<open>nat \<Rightarrow>  'a \<Rightarrow> nat  \<Rightarrow>  nat \<Rightarrow>  'a buffer_any_event process\<close> 
where \<open>Ctrl_any  \<equiv> \<mu> X.(\<lambda>sz cache to bo.
                        ( ((sz< maxbuff)  \<^bold>&
                             (input_any\<^bold>?x \<rightarrow>(
                                       ( ( sz=0) \<^bold>& X 1 x to bo)  
                                          \<box>
                                       ( (sz>0 ) \<^bold>& (wrt\<^bold>!(to,x) \<rightarrow> X (sz+1) cache ((to+1)mod maxring)  bo))) ))
                                  
                        \<box>
                        ((sz > 0)     \<^bold>& 
                              (output_any\<^bold>!cache \<rightarrow>(
                                       ( (sz>1)  \<^bold>& (rd\<^bold>?(i,x) \<in> {i. i = bo} \<times> UNIV \<rightarrow> X (sz-1) x to ((bo+1)mod maxring)))
                                          \<box>
                                       ( (sz=1) \<^bold>& X 0 cache to bo ) ) ) )
                      ))  \<close>

definition Cell_any_A :: "(nat \<times> 'a, 'a buffer_any_event) A\<^sub>d" (\<open>A\<^sub>c\<close>)
  where "A\<^sub>c \<equiv> \<lparr>
    \<tau> = (\<lambda>s e. case s of (n, v) \<Rightarrow> 
                      (case e of 
                             rd (n, v) \<Rightarrow>  \<lfloor>(n, v)\<rfloor> 
                           | wrt (i, x) \<Rightarrow> if i = n then \<lfloor>(n, x)\<rfloor> else \<diamond>)),
    \<S>\<^sub>F = {}, 
    \<S>\<^sub>I = {}  
  \<rparr>"

lemma Cell_any_\<epsilon> :
  "\<epsilon> A\<^sub>c s = (case s of (n, v) \<Rightarrow> {rd (n, v)} \<union> (range (\<lambda>x. wrt (n, x))))"
 (*by (auto simp add: Cell_any_A_def \<epsilon>_simps split: buffer_any_event.splits if_splits)
     (use bot_nat_0.not_eq_extremum maxbuff_g0 in blast)
*)
  sorry

lemma Cell_any_\<tau> :
  \<open>\<tau> Cell_any_A s e =  (case s of (n, v) \<Rightarrow> 
                      (case e of 
                             rd (n, v) \<Rightarrow>  \<lfloor>(n, v)\<rfloor> 
                           | wrt (i, x) \<Rightarrow> if i = n then \<lfloor>(n, x)\<rfloor> else \<diamond>))\<close>
  by (simp add: Cell_any_A_def)


definition Cell_any_P_d :: \<open>nat \<Rightarrow> 'a \<Rightarrow> 'a buffer_any_event process\<close> where
  \<open>Cell_any_P_d n v \<equiv> P\<lbrakk>A\<^sub>c\<rbrakk>\<^sub>d (n, v)\<close>

lemma Cell_any_is_Cell_any_P_d : \<open>Cell_any n v = Cell_any_P_d n v\<close>
  sorry





definition
\<open>Ring_any = \<^bold>|\<^bold>|\<^bold>| i \<in># mset [0..<maxring]. RingCell_any i \<close>


definition Syn  :: \<open>'a buffer_any_event  set\<close>
  where     \<open>Syn  \<equiv> {rd x | x. True} \<union> {wrt x | x . True}\<close>

definition RingBuffer_any :: \<open>'a buffer_any_event process\<close>
  where \<open>RingBuffer_any = (Ctrl_any  0 undefined 0 0 \<lbrakk>Syn\<rbrakk> Ring_any) \ Syn\<close>

subsection\<open>Proc-Omata \<close>


text \<open>Actually, the proof also works for the generalized version\<close>

lemma deadlock_free_BBuf_any : \<open>deadlock_free (BBuf_any (length L) L)\<close>
  oops
  text \<open>The refinement\<close>

lemma \<open>BBuf_any\<cdot>0\<cdot>[] \<sqsubseteq>\<^sub>F\<^sub>D RingBuffer_any\<close>
  oops

lemma \<open>BBuf\<cdot>0\<cdot>[] \<sqsubseteq>\<^sub>F\<^sub>D RingBuffer\<close>
proof (induct rule: BBuf.induct)
  show \<open>adm (\<lambda>BBuf. BBuf\<cdot>0\<cdot>[] \<sqsubseteq>\<^sub>F\<^sub>D RingBuffer)\<close>
    by (simp add: monofunI)
next
  show \<open>\<bottom>\<cdot>0\<cdot>[] \<sqsubseteq>\<^sub>F\<^sub>D RingBuffer\<close> by simp
next
  fix B :: \<open>nat \<rightarrow> int list \<rightarrow> ringbuf_event process\<close>
  assume \<open>B\<cdot>0\<cdot>[] \<sqsubseteq>\<^sub>F\<^sub>D RingBuffer\<close>
  show \<open>(\<Lambda> sz buff.
        (sz < maxbuff) \<^bold>& (input\<^bold>?xa \<rightarrow> B\<cdot>(sz + 1)\<cdot>(buff @ [xa])) \<box>
        (0 < sz) \<^bold>& (output\<^bold>!hd buff \<rightarrow> B\<cdot>(sz - 1)\<cdot>(tl buff)))\<cdot>0\<cdot>[]
        \<sqsubseteq>\<^sub>F\<^sub>D RingBuffer\<close>
  proof (simp add: Det_STOP) (* forbidden by the linter, but well... *)
    show \<open>input\<^bold>?x \<rightarrow> B\<cdot>(Suc 0)\<cdot>[x] \<sqsubseteq>\<^sub>F\<^sub>D RingBuffer\<close>
      apply (unfold RingBuffer_def Ring_def)
      apply (subst Ctrl.unfold, simp add: Det_STOP)
      (* some work here, probably easier with compactification *)
      sorry
  qed
qed

end



end